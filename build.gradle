plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'co.com.gsdd'
version = '1.0.001'
sourceCompatibility = 1.8
targetCompatibility = 1.8

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
        
    tasks.withType(Test) {
       systemProperty "file.encoding", "UTF-8"
    }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-devtools')
	compileOnly 'org.projectlombok:lombok:1.18.12'
	annotationProcessor 'org.projectlombok:lombok:1.18.12'
	runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('com.h2database:h2')
	testCompileOnly 'org.projectlombok:lombok:1.18.12'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
}

test {
	useJUnitPlatform()
	ignoreFailures = false
	jacoco {
		//append = false
		destinationFile = file("build/jacoco/jacocoTest.exec")
	}
	reports.junitXml.destination = file("build/jacoco/test-results")
	testLogging.showStandardStreams = true
   	testLogging.exceptionFormat = 'full'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacocoTestReport.dependsOn(test)

plugins.withType(JacocoPlugin) {
  tasks["test"].finalizedBy 'jacocoTestReport'
}

task publish(type: GradleBuild) {
     tasks = ['clean', 'build', 'test', 'jacocoTestReport', 'jar']
}
